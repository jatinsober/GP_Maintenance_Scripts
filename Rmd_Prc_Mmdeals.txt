------
--Dev: Jitendra Lodwal
--Date: 26/09/2011
--Desc: Function
------

SET SEARCH_PATH TO RISK;

CREATE OR REPLACE FUNCTION Rmd_Prc_Mmdeals(RERUN_DATE IN DATE) RETURNS VOID AS $$
DECLARE
-- /*----------AMENDMENT DETAILS ------------------------*/--
-- AMYLIA AMENDED FOR CHECKING FOR DATA ALREADY INSERTED 
-- FOR CASE BUS DATE NOT UPDATED (SAME BUS DATE FOR DAILY PROC RUNNING) 
-- 20/05/2008 -- 
-- AMYLIA 24/12/2008 AS PER NEW STG TABLE 
-- /*----------- END----------------------------------- */ --



 PRO_NAME ADM_PROCESS_LOG.APL_PRO_NAME%TYPE;
 PRO_STATUS ADM_PROCESS_LOG.APL_PRO_STATUS%TYPE;
 PRO_BUS_DATE ADM_PROCESS_LOG.APL_PRO_BUS_DATE%TYPE;
 PRO_LOAD_STATUS ADM_PROCESS_LOG.APL_LOAD_STATUS%TYPE;
 PRO_SYSTEM_DATE ADM_PROCESS_LOG.APL_SYSTEM_DATE%TYPE;
 SYS_DATE DATE;
BEGIN

	 /*GET SYSTEM DATE*/
	SELECT CURRENT_DATE INTO SYS_DATE;


	/*LOAD START STATUS*/
	 PRO_NAME := 'LOAD GLOBUS DATA INTO MONEY MARKET DEALS';
	 PRO_STATUS := 'START';
	 PRO_BUS_DATE := RERUN_DATE;
	 PRO_LOAD_STATUS := 'TRUE';
	 PRO_SYSTEM_DATE := SYS_DATE;

	INSERT INTO ADM_PROCESS_LOG
	(APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
	VALUES	(PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);


	 /*1.TRUNCATE TABLE MONEY_MARKET_DEALS_STG*/
  PRO_NAME := 'TRUNCATE TABLE MONEY_MARKET_DEALS_STG';

	 TRUNCATE TABLE MONEY_MARKET_DEALS_STG;


	 /*2.LOAD * INTO MONEY_MARKET_DEALS_STG*/
  PRO_NAME := 'LOAD * INTO MONEY_MARKET_DEALS_STG';

  INSERT INTO MONEY_MARKET_DEALS_STG
  (MMD_BUS_DATE,
  MMD_SOURCE_ID,
  MMD_ROC,
  MMD_MGMT_CENTRE,
  MMD_DEAL_NUM,
  MMD_DEAL_DATE,
  MMD_VALUE_DATE,
  MMD_CURRENCY,
  MMD_PRINCIPAL_OUTS_AMT,
  MMD_INT_ACCURED,
  MMD_INT_PTG,
  MMD_DEPT_ACCT_OFF_CD,
  MMD_DEPT_ACCT_OFF_NM,
  MMD_PR_CODE,
  MMD_PR_NAME,
  MMD_MATURITY_DATE,
  MMD_CUST_ID,
  MMD_DEALER_DESK)
  SELECT TO_DATE(a.BUSSINESS_DAT, 'YYYYMMDD'),
  		a.SOURCE_ID,
 b.CO_REIGN_NO,
 SUBSTR(a.COMPANY_NAME, 1,30),
 TRIM(a.CONTRACT_NO) AS CONTRACT_NO,
 TO_DATE(a.DEAL_DAT, 'YYYYMMDD'),
  		TO_DATE(a.VALUE_DAT, 'YYYYMMDD'),
 a.CURR,
 a.PRINCIPAL,
 a.TOT_INTEREST_AMT,
  		a.INTEREST_RATE,
 CAST(a.DESK_DAO AS NUMERIC),
 a.DEPT_ACCT_OFFICER_NM,
 a.CATEGORY,
 SUBSTR(a.CATEGORY_SHT_NM, 1, 35),
 TO_DATE(a.MATURITY_DAT, 'YYYYMMDD'),
  	a.CUST_ID,
  	a.DEALER_DESK
 FROM GLO_MM_NEW_STG a, GLO_CUST_NEW_STG b -- AMENDED 24/12/2008 
 WHERE TRIM(a.CUST_ID) = TRIM(b.CUST_CD) AND
 a.BUSSINESS_DAT = b.BUS_DT;



 	 /*3.UPDATE ENTITY NAME IN MONEY_MARKET_DEALS_STG*/
  PRO_NAME := 'UPDATE ENTITY NAME IN MONEY_MARKET_DEALS_STG';

	/* ENTITY NAME */
	UPDATE MONEY_MARKET_DEALS_STG
	SET MMD_EN_NAME = 'AMM'
	WHERE MMD_SOURCE_ID = 'GLO';



 	 /*4.UPDATE ACTIVITY GROUP, SUB LOB, LOB IN MONEY_MARKET_DEALS_STG*/
  PRO_NAME := 'UPDATE ACTIVITY GROUP, SUB LOB, LOB IN MONEY_MARKET_DEALS_STG';

 /* ACTIVITY GROUP, SUB LOB, LOB */
 DECLARE
  DEPT_ACCT_OFF_CD NUMERIC (4);
  DEPT_ACCT_OFF_NM VARCHAR(35);
  LOB VARCHAR(35);
  SUB_LOB VARCHAR(35);
  ACT_GRP VARCHAR(35);
X RECORD;
 BEGIN
 FOR X IN (SELECT DISTINCT MMD_DEPT_ACCT_OFF_CD,
  	 MMD_LOB, MMD_ACT_GROUP,
 		 MMD_DEPT_ACCT_OFF_NM
  FROM MONEY_MARKET_DEALS_STG)
 LOOP
 --DEPT_ACCT_OFF_NM := X.MMD_DEPT_ACCT_OFF_NM;
  ACT_GRP := X.MMD_DEPT_ACCT_OFF_NM;
  DEPT_ACCT_OFF_CD := X.MMD_DEPT_ACCT_OFF_CD;
  IF DEPT_ACCT_OFF_CD IN ('1800', '3800', '3900') THEN
 LOB := 'MONEY MARKET CONVENTIONAL';
  ELSIF DEPT_ACCT_OFF_CD = '2200' THEN
  	LOB := 'GROUP FUNDING CENTRE';
  ELSIF DEPT_ACCT_OFF_CD IN ('4310', '4390') THEN
 LOB := 'TREASURY DERIVATIVES';
  ELSIF DEPT_ACCT_OFF_CD = '5580' THEN
  	LOB := 'N/A';
  ELSIF DEPT_ACCT_OFF_CD IN ('6800', '7800', '7900') THEN
 LOB := 'MONEY MARKET ISLAMIC';
  ELSE
  	LOB := '';
  END IF;
  SUB_LOB := 'N/A';
  UPDATE MONEY_MARKET_DEALS_STG SET MMD_LOB = LOB,
  					 MMD_ACT_GROUP = ACT_GRP,
  					 MMD_SUB_LOB = SUB_LOB
  		WHERE MMD_DEPT_ACCT_OFF_CD = DEPT_ACCT_OFF_CD;
 END LOOP;
 END;



 	 /*5.REPLACE ROC = *, 0 WITH CUST_ID IN MONEY_MARKET_DEALS_STG*/
  PRO_NAME := 'REPLACE ROC = *, 0 WITH CUST_ID IN MONEY_MARKET_DEALS_STG';

/* TO REPLACE ROC = '*', '0' WITH CUST_ID */
DECLARE
		CUST_ROC MONEY_MARKET_DEALS_STG.MMD_ROC%TYPE;
		CUST_ID GLO_CUST_STG.CUST_CD%TYPE;
		BUS_DATE MONEY_MARKET_DEALS_STG.MMD_BUS_DATE%TYPE;
X RECORD;
		BEGIN
			 FOR X IN
			 	 (SELECT DISTINCT A.MMD_ROC, A.MMD_CUST_ID,
				 		 	 TO_DATE(b.BUS_DT, 'YYYYMMDD') AS BUS_DT, b.CUST_CD
		 FROM MONEY_MARKET_DEALS_STG A, GLO_CUST_STG B
		 WHERE TRIM(A.MMD_CUST_ID) = TRIM(B.CUST_CD)
		 AND TRIM(A.MMD_ROC) IN ('*', '0'))
			 LOOP
			 CUST_ROC 	 := X.MMD_ROC;
				 CUST_ID 	 := X.MMD_CUST_ID;
				 BUS_DATE	 := X.BUS_DT;
				 UPDATE MONEY_MARKET_DEALS_STG
				 SET	 MMD_ROC = CUST_ID
				 WHERE TRIM(MMD_ROC) IN ('*', '0')
				 AND 	 MMD_BUS_DATE = BUS_DATE;
			 END LOOP;
			END;


 	 /*7.CONVERT FACE VALUE IN ALL FOREIGN CURRENCY TO MYR EQUIVALENT*/
  PRO_NAME := 'CONVERT FACE VALUE IN ALL FOREIGN CURRENCY TO MYR EQUIVALENT';

/* CONVERT FACE VALUE IN ALL FOREIGN CURRENCY TO 'MYR EQUIVALENT' */
DECLARE
 BUS_DT MONEY_MARKET_DEALS_STG.MMD_BUS_DATE%TYPE;
 CUST_ID MONEY_MARKET_DEALS_STG.MMD_ROC%TYPE;
 ACCT_NO MONEY_MARKET_DEALS_STG.MMD_DEAL_NUM%TYPE;
 CURR_ORIG MONEY_MARKET_DEALS_STG.MMD_CURRENCY%TYPE;
 CURR_FX GLO_CURRENCY_STG.CURRENCY_CD%TYPE;
 ORIG_PRINCIPAL MONEY_MARKET_DEALS_STG.MMD_PRINCIPAL_OUTS_AMT%TYPE;
 ORIG_INTEREST MONEY_MARKET_DEALS_STG.MMD_INT_ACCURED%TYPE;
 MYR_PRINCIPAL MONEY_MARKET_DEALS_STG.MMD_PRINCIPAL_OUTS_AMT%TYPE;
 MYR_INTEREST MONEY_MARKET_DEALS_STG.MMD_INT_ACCURED%TYPE;
 EX_RATE GLO_CURRENCY_STG.MID_REVAL_RATE%TYPE;
 QUOTATION GLO_CURRENCY_STG.QUOTATIONS_CD%TYPE;
X RECORD;
	 BEGIN
	 FOR X IN
 	 (SELECT A.MMD_BUS_DATE, A.MMD_ROC, A.MMD_DEAL_NUM,
			 	 A.MMD_CURRENCY,
 		 	 	 A.MMD_PRINCIPAL_OUTS_AMT, A.MMD_INT_ACCURED,
		 			 B.CURRENCY_CD, B.QUOTATIONS_CD, B.MID_REVAL_RATE
 		 FROM MONEY_MARKET_DEALS_STG A , GLO_CURRENCY_STG B
 		 WHERE A.MMD_BUS_DATE  = TO_DATE(B.BUS_DATE, 'YYYYMMDD')
 		 AND A.MMD_CURRENCY 	 = B.CURRENCY_CD)
	 LOOP
		 BUS_DT 		 	:= X.MMD_BUS_DATE;
		 CUST_ID			:= X.MMD_ROC;
		 ACCT_NO			:= X.MMD_DEAL_NUM;
		 ORIG_PRINCIPAL	:= X.MMD_PRINCIPAL_OUTS_AMT ;
		 ORIG_INTEREST 	:= X.MMD_INT_ACCURED;
		 CURR_ORIG		:= X.MMD_CURRENCY;
		 CURR_FX			:= X.CURRENCY_CD;
		 EX_RATE			:= X.MID_REVAL_RATE;
		 QUOTATION 		:= X.QUOTATIONS_CD;
		 IF (CURR_ORIG = CURR_FX) AND (QUOTATION = 0) THEN
		 	 MYR_PRINCIPAL := (ORIG_PRINCIPAL * EX_RATE /1);
					 MYR_INTEREST	 := (ORIG_INTEREST * EX_RATE /1);
		 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 1) THEN
		 	 MYR_PRINCIPAL := (ORIG_PRINCIPAL * EX_RATE /10);
					 MYR_INTEREST	 := (ORIG_INTEREST * EX_RATE /10);
		 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 2) THEN
		 	 MYR_PRINCIPAL := (ORIG_PRINCIPAL * EX_RATE /100);
					 MYR_INTEREST	 := (ORIG_INTEREST * EX_RATE /100);
		 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 3) THEN
		 	 MYR_PRINCIPAL := (ORIG_PRINCIPAL * EX_RATE /1000);
					 MYR_INTEREST	 := (ORIG_INTEREST * EX_RATE /1000);
		 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 4) THEN
		 	 MYR_PRINCIPAL := (ORIG_PRINCIPAL * EX_RATE /10000);
					 MYR_INTEREST	 := (ORIG_INTEREST * EX_RATE /10000);
		 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 5) THEN
		 	 MYR_PRINCIPAL := (ORIG_PRINCIPAL * EX_RATE /100000);
					 MYR_INTEREST	 := (ORIG_INTEREST * EX_RATE /100000);
		 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 6) THEN
		 	 MYR_PRINCIPAL := (ORIG_PRINCIPAL * EX_RATE /1000000);
					 MYR_INTEREST	 := (ORIG_INTEREST * EX_RATE /1000000);
		 ELSE MYR_PRINCIPAL := ORIG_PRINCIPAL;
		 	 MYR_INTEREST	 := ORIG_INTEREST;
		 END IF;

		UPDATE MONEY_MARKET_DEALS_STG SET 	
MMD_PRINCIPAL_OUTS_AMT = MYR_PRINCIPAL,
MMD_INT_ACCURED = MYR_INTEREST
WHERE TRIM(MMD_ROC) = TRIM(CUST_ID)
AND MMD_BUS_DATE = BUS_DT
AND TRIM(MMD_DEAL_NUM) = TRIM(ACCT_NO)
AND MMD_CURRENCY = CURR_ORIG;

END LOOP;
		END;



 	 /*8.INSERT * FROM MONEY_MARKET_DEALS_STG INTO MONEY_MARKET_DEALS*/
  PRO_NAME := 'INSERT * FROM MONEY_MARKET_DEALS_STG INTO MONEY_MARKET_DEALS';
	 
	 -- DO THE CHECKING IF THE DATA ALREADY INSERTED ( CASE FOR BUS DATE NOT UPDATED) 
	 --AMYLIA 20/05/2008 
	 DECLARE 
	 
	 V_STG_DATE DATE;
	 V_MMD_DATE DATE;
	 
	 BEGIN 
	 
	 SELECT DISTINCT MMD_BUS_DATE INTO V_STG_DATE
	 FROM MONEY_MARKET_DEALS_STG;

	 SELECT MAX(A.MMD_BUS_DATE) INTO V_MMD_DATE
	 FROM MONEY_MARKET_DEALS A;

	 	 
	 IF V_STG_DATE <> V_MMD_DATE THEN 

  INSERT INTO MONEY_MARKET_DEALS
  (MMD_BUS_DATE,
 MMD_EN_NAME,
 MMD_ROC,
 MMD_ACCT_NUM,
 MMD_MGMT_CENTRE,
 MMD_DEAL_NUM,
 MMD_DEAL_DATE,
 MMD_VALUE_DATE,
 MMD_CURRENCY,
 MMD_PRINCIPAL_OUTS_AMT,
 MMD_INT_ACCURED,
 MMD_INT_PTG,
 MMD_ACT_GROUP,
 MMD_LOB,
 MMD_SUB_LOB,
 MMD_PR_CODE,
 MMD_PR_NAME,
 MMD_MATURITY_DATE,
 MMD_APPL_ID)
 SELECT MMD_BUS_DATE,
  		MMD_EN_NAME,
  		LTRIM(MMD_ROC, 0) AS MMD_ROC,
  		MMD_ACCT_NUM,
  		MMD_MGMT_CENTRE,
  		MMD_DEAL_NUM,
  		MMD_DEAL_DATE,
  		MMD_VALUE_DATE,
  		MMD_CURRENCY,
  		MMD_PRINCIPAL_OUTS_AMT,
  		MMD_INT_ACCURED,
  		MMD_INT_PTG,
  		MMD_ACT_GROUP,
  		MMD_LOB,
  		MMD_SUB_LOB,
  		MMD_PR_CODE,
  		MMD_PR_NAME,
  		MMD_MATURITY_DATE,
  		MMD_SOURCE_ID
 FROM MONEY_MARKET_DEALS_STG
 WHERE TRIM(MMD_ROC) NOT LIKE '%*%' AND MMD_ROC IS NOT NULL;


	/*LOAD START STATUS*/
	 PRO_NAME := 'LOAD GLOBUS DATA INTO MONEY MARKET DEALS';
	 PRO_STATUS := 'END';
	 PRO_BUS_DATE := RERUN_DATE;
	 PRO_LOAD_STATUS := 'TRUE';
	 PRO_SYSTEM_DATE := SYS_DATE;

	INSERT INTO ADM_PROCESS_LOG
	(APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
	VALUES	(PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);
	
	ELSE 
 
	/*LOAD START STATUS -- DATA ALREADY INSERTED*/
	PRO_NAME := 'LOAD GLOBUS DATA INTO MONEY MARKET DEALS';
	PRO_STATUS := 'DATA ALREADY INSERTED';
	PRO_BUS_DATE := RERUN_DATE;
	PRO_LOAD_STATUS := 'TRUE';
	PRO_SYSTEM_DATE := SYS_DATE;

	INSERT INTO ADM_PROCESS_LOG
	(APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
	VALUES	(PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);
 
 END IF;
 END;


EXCEPTION
  WHEN OTHERS THEN
		 /*INSERT INTO ADM_EXT_TO_STG_LOG*/
		 --PRO_NAME := 'LOAD EXTERNAL TABLE INTO STAGING TABLE';
		 PRO_STATUS := '-1,error';
		 PRO_BUS_DATE := RERUN_DATE;
		 PRO_SYSTEM_DATE := Get_Current_Date(SYS_DATE);
		 PRO_LOAD_STATUS := 'FALSE';

		 INSERT INTO ADM_PROCESS_LOG
		 (APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
		 VALUES	(PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);

		 /*INSERT INTO ADM_ERROR_LOG*/
		 INSERT INTO ADM_ERROR_LOG
		 (AEL_PRO_NAME, AEL_PRO_STATUS, AEL_PRO_BUS_DATE, AEL_LOAD_STATUS, AEL_SYSTEM_DATE)
		 VALUES	(PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);

END;
$$
LANGUAGE PLPGSQL;
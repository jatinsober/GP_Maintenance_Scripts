------
--DEV BY : Jitendra Lodwal  
--DATE  : 25-09-2011 
--DESC : FUNCTION
------

SET SEARCH_PATH TO RISK;

create or replace function last_day(date) returns date as 'select 
cast(date_trunc(''month'', $1) + ''1 month''::interval as date) - 1'                                
language sql;

CREATE OR REPLACE FUNCTION GET_DATE(CURRENT_DT OUT DATE) RETURNS DATE AS $$

DECLARE
	NPD_VAL DATE;
	NEXT_PROCESS_DAY VARCHAR(10);
	LAST_DAY_OF_MONTH DATE;
	COUNT_DATE INT;
BEGIN

	 /*1.GET NEXT PROCESSING DATE*/
	 SELECT CAST(LAST_PROCESSING_DATE AS DATE) + 1 AS NPD INTO NPD_VAL
	 FROM ADM_ADMIN WHERE NEXT_PROCESSING_DATE IS NULL;

     RAISE NOTICE '*';

 	 /*2.GET LAST_DAY OF THE MONTH*/
	 LAST_DAY_OF_MONTH := LAST_DAY(NPD_VAL) ;

    RAISE NOTICE '**';


	--<<STATE1>>

	 /*3.GET DAY FOR NEXT PROCESSING DATE*/
	
 NEXT_PROCESS_DAY := TO_CHAR(LAST_DAY_OF_MONTH,'day');

	 	     RAISE NOTICE '***';

	 IF(TRIM(NEXT_PROCESS_DAY) NOT IN ('SATURDAY', 'SUNDAY')) THEN

        	 /*CHECK PUBLIC HOLIDAY*/
        	 SELECT COUNT(HOLIDAY_DATE) AS CNT_DATE INTO COUNT_DATE FROM PUBLIC_HOLIDAY_STG
        	 WHERE HOLIDAY_DATE = LAST_DAY_OF_MONTH;
        	 IF(COUNT_DATE = 0) THEN
        	     /*NEXT_PROCESSING_DATE IS NOT ON PUBLIC HOLIDAY. STOP PROCESS*/
                 /*RETURN DATE*/
				--RETURN LAST_DAY_OF_MONTH; 
        	 ELSE
        	     /*NEXT_PROCESSING_DATE IS ON PUBLIC HOLIDAY. STOP PROCESS*/

				 LAST_DAY_OF_MONTH := CAST(LAST_DAY_OF_MONTH AS DATE) - 1;
	 		    --GOTO STATE1;


             END IF;

	 ELSE
	 	 	 LAST_DAY_OF_MONTH := CAST(LAST_DAY_OF_MONTH AS DATE) - 1;
	 		--GOTO STATE1;

	 END IF;




END;

$$
LANGUAGE PLPGSQL;
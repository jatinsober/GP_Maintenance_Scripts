------
--Dev: Jitendra Lodwal
--Date: 26/09/2011
--Desc: Function
------

SET SEARCH_PATH TO RISK;

CREATE OR REPLACE FUNCTION Rmd_Prc_Debt_Sec(RERUN_DATE IN DATE) RETURNS VOID AS $$
DECLARE

/*********************************************************************************************************************/
-- AUTHOR -------- DATE ------------- REMARKS ---------------------
/*********************************************************************************************************************/
-- AMYLIA 03-DEC-2008 TO RENAME ALL THE NEW TABLES FOR GLOBUS



/*********************************************************************************************************************/

 PRO_NAME ADM_PROCESS_LOG.APL_PRO_NAME%TYPE;
 PRO_STATUS ADM_PROCESS_LOG.APL_PRO_STATUS%TYPE;
 PRO_BUS_DATE ADM_PROCESS_LOG.APL_PRO_BUS_DATE%TYPE;
 PRO_LOAD_STATUS ADM_PROCESS_LOG.APL_LOAD_STATUS%TYPE;
 PRO_SYSTEM_DATE ADM_PROCESS_LOG.APL_SYSTEM_DATE%TYPE;
 SYS_DATE DATE;
BEGIN

 /*GET SYSTEM DATE*/
 SELECT CURRENT_DATE INTO SYS_DATE ;

/********************************************************************************************************************/
-- INSERT INTO DEBT SEC
/********************************************************************************************************************/

 /*LOAD START STATUS*/
 PRO_NAME := 'LOAD GLOBUS DATA INTO DEBT SEC';
 PRO_STATUS := 'START';
 PRO_BUS_DATE := RERUN_DATE;
 PRO_LOAD_STATUS := 'TRUE';
 PRO_SYSTEM_DATE := SYS_DATE;

 INSERT INTO ADM_PROCESS_LOG
 (APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
 VALUES (PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);

 /*1.TRUNCATE TABLE DEBT_SEC_AMM_STG*/
 PRO_NAME := 'TRUNCATE TABLE DEBT_SEC_AMM_STG';

 TRUNCATE TABLE DEBT_SEC_AMM_STG;



 /*2.VALUE_DATE_POS = 0 -- OFF BALANCE SHEET*/
 PRO_NAME := 'VALUE_DATE_POS = 0 -- OFF BALANCE SHEET';

/* VALUE_DATE_POS = 0 -- OFF BALANCE SHEET */
 INSERT INTO DEBT_SEC_AMM_STG (DATE_EXTRACT,
 ROC,
 EN_NAME,
 ACT_GROUP,
 SUB_LOB,
 MGMT_CENTRE,
 PR_CODE,
 PR_NAME,
 RISK_SECTOR,
 ISSUE_SIZE,
 BOOK_CODE,
 FACE_VALUE,
 ACCRUED_INT,
 CURRENCY,
 MATURITY_DATE,
 ISSUE_DATE,
 COUPON_DATE,
 COUPON_RATE,
 RAM_MARC,
 BOND_INT_GRADE,
 GUARANTEE,
 SOURCE_ID,
 ISSUER,
 CUST_CD,
 SECURITY_CD_DESC,
 VALUE_DATED_POS,
 CURR_POST,
 PRODUCT_GRP4,
 CPN_ACCR_POSTED,
 V_DATE_COST_OF_POS,
 DISC_ACCR_POSTED,
 SM_PRICE_TYPE,
 PRICE_TYP_PRICE_BASIS,
 VALUE_DATE,
 SECURITY_CD)
 
 (SELECT DISTINCT 

TO_DATE(b.BUSINESS_DAT, 'YYYYMMDD') AS DATE_EXTRACT,
a.CO_REIGN_NO AS ROC,
SUBSTR(b.COMPANY_NAME,1,30) AS COMPANY_NAME,
'AMM',
'TRADING',
'N/A',
CAST(b.SUB_ASSET_TYPE AS CHAR) AS PR_CODE,
SUBSTR(b.CATEGORY_SHT_NM,1,30) AS PR_NAME,
SUBSTR(a.SEC_SH_NM,1,30) AS RISK_SECTOR,
b.SM_ISSUE_SIZE AS ISSUE_SIZE,
TRIM(b.DEALER_BOOK) AS BOOK_CODE,
CAST(b.CURR_POST AS NUMERIC) AS FACE_VALUE,
b.CPN_ACCR_POSTED AS ACCR_INTEREST,
b.SEC_CCY AS CURRENCY,
TO_DATE(b.SM_MATURITY_DATE,'YYYYMMDD') AS MATURITY_DATE,
TO_DATE(b.ISSUE_DT, 'YYYYMMDD') AS ISSUE_DT,
b.COUPON_DT,
CAST(b.INTEREST_RATE as numeric) AS COUPON_RATE,
b.AMRATING_RAM_MARC AS RAM_MARC,
b.AMRATING_RAM_MARCH_GRPING AS BOND_INT_GRADE,
SUBSTR(b.GUARANTEE,1,20) AS GUARANTEE,
b.SOURCE_ID AS SOURCE_ID,
SUBSTR(b.SM_ISSUER,1, 15) AS ISSUER,
a.CUST_CD AS CUST_CD,
b.SHORT_NM AS SECURITY_CD_DESC,
CAST(b.VALUE_DATED_POS AS NUMERIC) AS VALUE_DATED_POS,
CAST(b.CURR_POST AS NUMERIC) AS CURR_POST,
'OFF BALANCE SHEET',
b.CPN_ACCR_POSTED,
b.V_DATE_COST_OF_POS,
b.DISC_ACCR_POSTED,
b.SM_PRICE_TYPE,
b.PRICE_TYP_PRICE_BASIS,
TO_DATE(SUBSTR(b.VALUE_DATE,1,8), 'YYYYMMDD') AS VALUE_DATE,
b.SEC_CODE AS SECURITY_CD
 
FROM GLO_SC_TRD_POST_NEW_STG b , GLO_CUST_NEW_STG a
 WHERE TRIM(b.SM_ISSUER) = TRIM(a.CUST_CD)
 AND a.BUS_DT = b.BUSINESS_DAT
 AND VALUE_DATED_POS = 0);



 /*3.VALUE_DATE_POS > 0 -- OFF BALANCE SHEET*/
 PRO_NAME := 'VALUE_DATE_POS > 0 -- OFF BALANCE SHEET';

/* VALUE_DATE_POS > 0 -- OFF BALANCE SHEET */

INSERT INTO DEBT_SEC_AMM_STG (DATE_EXTRACT,
ROC,
EN_NAME,
ACT_GROUP,
SUB_LOB,
MGMT_CENTRE,
PR_CODE,
PR_NAME,
RISK_SECTOR,
ISSUE_SIZE,
BOOK_CODE,
FACE_VALUE,
ACCRUED_INT,
CURRENCY,
MATURITY_DATE,
ISSUE_DATE,
COUPON_DATE,
COUPON_RATE,
RAM_MARC,
BOND_INT_GRADE,
GUARANTEE,
SOURCE_ID,
ISSUER,
CUST_CD,
SECURITY_CD_DESC,
VALUE_DATED_POS,
CURR_POST,
PRODUCT_GRP4,
CPN_ACCR_POSTED,
V_DATE_COST_OF_POS,
DISC_ACCR_POSTED,
SM_PRICE_TYPE,
PRICE_TYP_PRICE_BASIS,
VALUE_DATE,
SECURITY_CD)
 (SELECT DISTINCT TO_DATE(b.BUSINESS_DAT, 'YYYYMMDD') AS DATE_EXTRACT,
a.CO_REIGN_NO AS ROC,'AMM',
'TRADING ',
'N/A',
SUBSTR(b.COMPANY_NAME,1,30) AS COMPANY_NAME,
CAST(b.SUB_ASSET_TYPE AS TIMESTAMP) AS PR_CODE,
SUBSTR(b.CATEGORY_SHT_NM,1,30) AS PR_NAME,
SUBSTR(a.SEC_SH_NM,1,30) AS RISK_SECTOR,
b.SM_ISSUE_SIZE AS ISSUE_SIZE,
TRIM(b.DEALER_BOOK) AS BOOK_CODE,
(CAST(b.CURR_POST AS NUMERIC) - CAST(b.VALUE_DATED_POS AS NUMERIC)) AS FACE_VALUE,
b.CPN_ACCR_POSTED AS ACCR_INTEREST,
b.SEC_CCY AS CURRENCY,
TO_DATE(b.SM_MATURITY_DATE,'YYYYMMDD') AS MATURITY_DATE,
TO_DATE(b.ISSUE_DT, 'YYYYMMDD') AS ISSUE_DT,
b.COUPON_DT,
CAST(b.INTEREST_RATE AS NUMERIC) AS COUPON_RATE,
b.AMRATING_RAM_MARC AS RAM_MARC,
b.AMRATING_RAM_MARCH_GRPING AS BOND_INT_GRADE,
SUBSTR(b.GUARANTEE,1,20) AS GUARANTEE,
b.SOURCE_ID AS SOURCE_ID,
SUBSTR(b.SM_ISSUER,1, 15) AS ISSUER,
a.CUST_CD AS CUST_CD,
b.SHORT_NM AS SECURITY_CD_DESC,
CAST(b.VALUE_DATED_POS AS NUMERIC) AS VALUE_DATED_POS,
CAST(b.CURR_POST AS NUMERIC) AS CURR_POST,
'OFF BALANCE SHEET',
b.CPN_ACCR_POSTED,
b.V_DATE_COST_OF_POS,
b.DISC_ACCR_POSTED,
b.SM_PRICE_TYPE,
b.PRICE_TYP_PRICE_BASIS,
TO_DATE(SUBSTR(b.VALUE_DATE,1,8), 'YYYYMMDD') AS VALUE_DATE,
b.SEC_CODE AS SECURITY_CD
 -- FROM GLO_SC_TRD_POST_STG b , GLO_CUST_STG a
 FROM GLO_SC_TRD_POST_NEW_STG b , GLO_CUST_NEW_STG a
 WHERE b.SM_ISSUER = a.CUST_CD
 AND a.BUS_DT = b.BUSINESS_DAT
 AND VALUE_DATED_POS > 0);



 /*4.VALUE_DATED_POS > 0 -- ON BALANCE SHEET*/
 PRO_NAME := 'VALUE_DATED_POS > 0 -- ON BALANCE SHEET';

/* VALUE_DATED_POS > 0 -- ON BALANCE SHEET */

INSERT INTO DEBT_SEC_AMM_STG (DATE_EXTRACT,
ROC,
EN_NAME,
ACT_GROUP,
SUB_LOB,
MGMT_CENTRE,
PR_CODE,
PR_NAME,
RISK_SECTOR,
ISSUE_SIZE,
BOOK_CODE,
FACE_VALUE,
ACCRUED_INT,
CURRENCY,
MATURITY_DATE,
ISSUE_DATE,
COUPON_DATE,
COUPON_RATE,
RAM_MARC,
BOND_INT_GRADE,
GUARANTEE,
SOURCE_ID,
ISSUER,
CUST_CD,
SECURITY_CD_DESC,
VALUE_DATED_POS,
CURR_POST,
PRODUCT_GRP4,
CPN_ACCR_POSTED,
V_DATE_COST_OF_POS,
DISC_ACCR_POSTED,
SM_PRICE_TYPE,
PRICE_TYP_PRICE_BASIS,
VALUE_DATE,
SECURITY_CD)

 (SELECT DISTINCT TO_DATE(b.BUSINESS_DAT, 'YYYYMMDD') AS DATE_EXTRACT,
a.CO_REIGN_NO AS ROC,'AMM',
'TRADING ',
'N/A',
SUBSTR(b.COMPANY_NAME,1,30) AS COMPANY_NAME,
CAST(b.SUB_ASSET_TYPE AS TIMESTAMP) AS PR_CODE,
SUBSTR(b.CATEGORY_SHT_NM,1,30) AS PR_NAME,
SUBSTR(a.SEC_SH_NM,1,30) AS RISK_SECTOR,
b.SM_ISSUE_SIZE AS ISSUE_SIZE,
TRIM(b.DEALER_BOOK) AS BOOK_CODE,
CAST(b.VALUE_DATED_POS AS NUMERIC) AS FACE_VALUE,
b.CPN_ACCR_POSTED AS ACCR_INTEREST,
b.SEC_CCY AS CURRENCY,
TO_DATE(b.SM_MATURITY_DATE,'YYYYMMDD') AS MATURITY_DATE,
TO_DATE(b.ISSUE_DT, 'YYYYMMDD') AS ISSUE_DT,
b.COUPON_DT,
CAST(b.INTEREST_RATE AS NUMERIC) AS COUPON_RATE,
b.AMRATING_RAM_MARC AS RAM_MARC,
b.AMRATING_RAM_MARCH_GRPING AS BOND_INT_GRADE,
SUBSTR(b.GUARANTEE,1,20) AS GUARANTEE,
b.SOURCE_ID AS SOURCE_ID,
SUBSTR(b.SM_ISSUER,1, 15) AS ISSUER,
a.CUST_CD AS CUST_CD,
b.SHORT_NM AS SECURITY_CD_DESC,
CAST(b.VALUE_DATED_POS AS NUMERIC) AS VALUE_DATED_POS,
CAST(b.CURR_POST AS NUMERIC) AS CURR_POST,
'ON BALANCE SHEET',
b.CPN_ACCR_POSTED,
b.V_DATE_COST_OF_POS,
b.DISC_ACCR_POSTED,
b.SM_PRICE_TYPE,
b.PRICE_TYP_PRICE_BASIS,
TO_DATE(SUBSTR(b.VALUE_DATE, 1,8), 'YYYYMMDD') AS VALUE_DATE,
b.SEC_CODE AS SECURITY_CD
-- FROM GLO_SC_TRD_POST_STG b , GLO_CUST_STG a
 FROM GLO_SC_TRD_POST_NEW_STG b , GLO_CUST_NEW_STG a
 WHERE b.SM_ISSUER = a.CUST_CD
 AND a.BUS_DT = b.BUSINESS_DAT
 AND VALUE_DATED_POS > 0);



 /*5.VALUE_DATE_POS < 0 -- OFF BALANCE SHEET*/
 PRO_NAME := 'VALUE_DATE_POS < 0 -- OFF BALANCE SHEET';

/* VALUE_DATE_POS < 0 -- OFF BALANCE SHEET */

INSERT INTO DEBT_SEC_AMM_STG (DATE_EXTRACT,
ROC,
EN_NAME,
ACT_GROUP,
SUB_LOB,
MGMT_CENTRE,
PR_CODE,
PR_NAME,
RISK_SECTOR,
ISSUE_SIZE,
BOOK_CODE,
FACE_VALUE,
ACCRUED_INT,
CURRENCY,
MATURITY_DATE,
ISSUE_DATE,
COUPON_DATE,
COUPON_RATE,
RAM_MARC,
BOND_INT_GRADE,
GUARANTEE,
SOURCE_ID,
ISSUER,
CUST_CD,
SECURITY_CD_DESC,
VALUE_DATED_POS,
CURR_POST,
PRODUCT_GRP4,
CPN_ACCR_POSTED,
V_DATE_COST_OF_POS,
DISC_ACCR_POSTED,
SM_PRICE_TYPE,
PRICE_TYP_PRICE_BASIS,
VALUE_DATE,
SECURITY_CD)

 (SELECT DISTINCT TO_DATE(b.BUSINESS_DAT, 'YYYYMMDD') AS DATE_EXTRACT,
a.CO_REIGN_NO AS ROC,'AMM',
'TRADING ',
'N/A',
SUBSTR(b.COMPANY_NAME,1,30) AS COMPANY_NAME,
CAST(b.SUB_ASSET_TYPE AS TIMESTAMP) AS PR_CODE,
SUBSTR(b.CATEGORY_SHT_NM,1,30) AS PR_NAME,
SUBSTR(a.SEC_SH_NM,1,30) AS RISK_SECTOR,
b.SM_ISSUE_SIZE AS ISSUE_SIZE,
TRIM(b.DEALER_BOOK) AS BOOK_CODE,0,
b.CPN_ACCR_POSTED AS ACCR_INTEREST,
b.SEC_CCY AS CURRENCY,
TO_DATE(b.SM_MATURITY_DATE,'YYYYMMDD') AS MATURITY_DATE,
TO_DATE(b.ISSUE_DT, 'YYYYMMDD') AS ISSUE_DT,
b.COUPON_DT,
CAST(b.INTEREST_RATE AS NUMERIC) AS COUPON_RATE,
b.AMRATING_RAM_MARC AS RAM_MARC,
b.AMRATING_RAM_MARCH_GRPING AS BOND_INT_GRADE,
SUBSTR(b.GUARANTEE,1,20) AS GUARANTEE,
b.SOURCE_ID AS SOURCE_ID,
SUBSTR(b.SM_ISSUER,1, 15) AS ISSUER,
a.CUST_CD AS CUST_CD,
b.SHORT_NM AS SECURITY_CD_DESC,
CAST(b.VALUE_DATED_POS AS NUMERIC) AS VALUE_DATED_POS,
CAST(b.CURR_POST AS NUMERIC) AS CURR_POST,
'OFF BALANCE SHEET',
b.CPN_ACCR_POSTED,
b.V_DATE_COST_OF_POS,
b.DISC_ACCR_POSTED,
b.SM_PRICE_TYPE,
b.PRICE_TYP_PRICE_BASIS,
TO_DATE(SUBSTR(b.VALUE_DATE,1,8), 'YYYYMMDD') AS VALUE_DATE,
b.SEC_CODE AS SECURITY_CD
 -- FROM GLO_SC_TRD_POST_STG b , GLO_CUST_STG a
 FROM GLO_SC_TRD_POST_NEW_STG b , GLO_CUST_NEW_STG a
 WHERE b.SM_ISSUER = a.CUST_CD
 AND a.BUS_DT = b.BUSINESS_DAT
 AND VALUE_DATED_POS < 0);



 /*6.VALUE_DATE_POS < 0 -- ON BALANCE SHEET*/
 PRO_NAME := 'VALUE_DATE_POS < 0 -- ON BALANCE SHEET';


/* VALUE_DATED_POS < 0 -- ON BALANCE SHEET */

INSERT INTO DEBT_SEC_AMM_STG (DATE_EXTRACT,
ROC,
EN_NAME,
ACT_GROUP,
SUB_LOB,
MGMT_CENTRE,
PR_CODE,
PR_NAME,
RISK_SECTOR,
ISSUE_SIZE,
BOOK_CODE,
FACE_VALUE,
ACCRUED_INT,
CURRENCY,
MATURITY_DATE,
ISSUE_DATE,
COUPON_DATE,
COUPON_RATE,
RAM_MARC,
BOND_INT_GRADE,
GUARANTEE,
SOURCE_ID,
ISSUER,
CUST_CD,
SECURITY_CD_DESC,
VALUE_DATED_POS,
CURR_POST,
PRODUCT_GRP4,
CPN_ACCR_POSTED,
V_DATE_COST_OF_POS,
DISC_ACCR_POSTED,
SM_PRICE_TYPE,
PRICE_TYP_PRICE_BASIS,
VALUE_DATE,
SECURITY_CD)

 (SELECT DISTINCT TO_DATE(b.BUSINESS_DAT, 'YYYYMMDD') AS DATE_EXTRACT,
a.CO_REIGN_NO AS ROC,'AMM',
'TRADING ',
'N/A',
SUBSTR(b.COMPANY_NAME,1,30) AS COMPANY_NAME,
CAST(b.SUB_ASSET_TYPE AS TIMESTAMP) AS PR_CODE,
SUBSTR(b.CATEGORY_SHT_NM,1,30) AS PR_NAME,
SUBSTR(a.SEC_SH_NM,1,30) AS RISK_SECTOR,
b.SM_ISSUE_SIZE AS ISSUE_SIZE,
TRIM(b.DEALER_BOOK) AS BOOK_CODE,
CAST(b.VALUE_DATED_POS AS NUMERIC) AS FACE_VALUE,
b.CPN_ACCR_POSTED AS ACCR_INTEREST,
b.SEC_CCY AS CURRENCY,
TO_DATE(b.SM_MATURITY_DATE,'YYYYMMDD') AS MATURITY_DATE,
TO_DATE(b.ISSUE_DT, 'YYYYMMDD') AS ISSUE_DT,
b.COUPON_DT,
CAST(b.INTEREST_RATE AS NUMERIC) AS COUPON_RATE,
b.AMRATING_RAM_MARC AS RAM_MARC,
b.AMRATING_RAM_MARCH_GRPING AS BOND_INT_GRADE,
SUBSTR(b.GUARANTEE,1,20) AS GUARANTEE,
b.SOURCE_ID AS SOURCE_ID,
SUBSTR(b.SM_ISSUER,1, 15) AS ISSUER,
a.CUST_CD AS CUST_CD,
b.SHORT_NM AS SECURITY_CD_DESC,
CAST(b.VALUE_DATED_POS AS NUMERIC) AS VALUE_DATED_POS,
CAST(b.CURR_POST AS NUMERIC) AS CURR_POST,
'ON BALANCE SHEET',
b.CPN_ACCR_POSTED,
b.V_DATE_COST_OF_POS,
b.DISC_ACCR_POSTED,
b.SM_PRICE_TYPE,
b.PRICE_TYP_PRICE_BASIS,
TO_DATE(SUBSTR(b.VALUE_DATE,1,8), 'YYYYMMDD') AS VALUE_DATE,
b.SEC_CODE AS SECURITY_CD
 --FROM GLO_SC_TRD_POST_STG b , GLO_CUST_STG a
 FROM GLO_SC_TRD_POST_NEW_STG b , GLO_CUST_NEW_STG a
 WHERE b.SM_ISSUER = a.CUST_CD
 AND a.BUS_DT = b.BUSINESS_DAT
 AND VALUE_DATED_POS < 0);



 /*7.INSERT LINE OF BUSINESS*/
 PRO_NAME := 'INSERT LINE OF BUSINESS';

/* TO INSERT LINE OF BUSINESS */
DECLARE
 DEALER_BOOK_CD DEBT_SEC_AMM_STG.BOOK_CODE%TYPE;
 LINE_OF_BUS DEBT_SEC_AMM_STG.LOB%TYPE;
X record;

BEGIN
 FOR X IN
 (SELECT DISTINCT TRIM(DEALER_BOOK) AS DEALER_BOOK
 FROM GLO_SC_TRD_POST_NEW_STG)
 LOOP
 DEALER_BOOK_CD := X.DEALER_BOOK;
 IF DEALER_BOOK_CD IN ('100000-580', '100000-132', '100000-170', '100408-130',
 '100408-580', '100412-130', '100412-580', '100410-580',
 '100410-130', '100414-130', '100414-580', '102623-580',
 '100111-580', '100111-130', '100111-170', '100686-231') THEN
 LINE_OF_BUS := 'PRINCIPAL DEALER TRADING - CONVENTIONAL';
 ELSIF DEALER_BOOK_CD IN ('600000-232') THEN
 LINE_OF_BUS := 'PRINCIPAL DEALER TRADING - ISLAMIC';
 ELSIF DEALER_BOOK_CD IN ('100000-192', '100000-122', '100000-181', '100000-150',
 '100000-186', '100408-120', '100412-120', '100410-120',
 '100414-120', '100287-160', '102623-120', '100111-192',
 '100111-181', '100686-610', '100686-220') THEN
 LINE_OF_BUS := 'PDS TRADING - CONVENTIONAL';
 ELSIF DEALER_BOOK_CD IN ('600000-220', '600000-250', '600000-251', '600000-333',
 '600000-230') THEN
 LINE_OF_BUS := 'PDS TRADING - ISLAMIC';
 ELSIF DEALER_BOOK_CD IN ('100000-115', '100000-112', '100408-110', '400412-110',
 '100410-110', '100414-110', '102623-110') THEN
 LINE_OF_BUS := 'PDS UNDERWRITING - CONVENTIONAL';
 ELSIF DEALER_BOOK_CD IN ('100000-520', '100000-530', '100408-520', '100408-530') THEN
 LINE_OF_BUS := 'PDS UNDERWRITING - ISLAMIC';
 ELSIF DEALER_BOOK_CD IN ('100000-520', '100000-530', '100408-520', '100408-530',
 '100412-520', '100412-530', '100410-520', '100410-530',
 '100414-520', '100414-530', '102623-510', '102623-530',
 '100111-520', '100111-530', '100686-620', '100686-630') THEN
 LINE_OF_BUS := 'PDS INVESTMENT - CONVENTIONAL';
 ELSIF DEALER_BOOK_CD IN ('600000-620', '600000-630') THEN
 LINE_OF_BUS := 'PDS INVESTMENT - ISLAMIC';
 ELSIF DEALER_BOOK_CD IN ('100000-140') THEN
 LINE_OF_BUS := 'CBO/CLO ASSET SECURITISATION SCHEME';
 ELSIF DEALER_BOOK_CD IN ('100000-470') THEN
 LINE_OF_BUS := 'EQUITY DERIVATIVES TRADING';
 ELSIF DEALER_BOOK_CD IN ('100000-412') THEN
 LINE_OF_BUS := 'FX RATE DERIVATIVES';
 ELSIF DEALER_BOOK_CD IN ('100000-510', '100111-510') THEN
 LINE_OF_BUS := 'MONEY MARKET - CONVENTIONAL';
 END IF;
 UPDATE DEBT_SEC_AMM_STG SET LOB = LINE_OF_BUS
 WHERE TRIM(BOOK_CODE) = TRIM(DEALER_BOOK_CD);
 END LOOP;
END;


 /* TO DEFAULT THE NULL VALUE AS 0 IN DEBT_SEC_AMB_STG */

 /*8.SET CPN_ACCR_POSTED = 0 IN DEBT_SEC_AMB_STG*/
 PRO_NAME := 'SET CPN_ACCR_POSTED = 0 IN DEBT_SEC_AMB_STG';

 UPDATE DEBT_SEC_AMM_STG SET CPN_ACCR_POSTED = 0
 WHERE CPN_ACCR_POSTED IS NULL;


 /*9.SET V_DATE_COST_OF_POS = 0 IN DEBT_SEC_AMB_STG*/
 PRO_NAME := 'SET V_DATE_COST_OF_POS = 0 IN DEBT_SEC_AMB_STG';

 UPDATE DEBT_SEC_AMM_STG SET V_DATE_COST_OF_POS = 0
 WHERE V_DATE_COST_OF_POS IS NULL;


 /*10.SET VALUE_DATED_POS = 0 IN DEBT_SEC_AMB_STG*/
 PRO_NAME := 'SET VALUE_DATED_POS = 0 IN DEBT_SEC_AMB_STG';

 UPDATE DEBT_SEC_AMM_STG SET VALUE_DATED_POS = 0
 WHERE VALUE_DATED_POS IS NULL;


 /*11.SET DISC_ACCR_POSTED = 0 IN DEBT_SEC_AMB_STG*/
 PRO_NAME := 'SET DISC_ACCR_POSTED = 0 IN DEBT_SEC_AMB_STG';

 UPDATE DEBT_SEC_AMM_STG SET DISC_ACCR_POSTED = 0
 WHERE DISC_ACCR_POSTED IS NULL;



 /*12.REPLACE ALL ROC = '*', '0' WITH CUST_CD*/
 PRO_NAME := 'REPLACE ALL ROC = *, 0 WITH CUST_CD';

/* REPLACE ALL ROC = '*', '0' WITH CUST_CD */
DECLARE
 CUST_ROC DEBT_SEC_AMM_STG.ROC%TYPE;
 CUST_ID DEBT_SEC_AMM_STG.CUST_CD%TYPE;
 SEC_CD DEBT_SEC_AMM_STG.SECURITY_CD%TYPE;
 BUS_DATE DEBT_SEC_AMM_STG.DATE_EXTRACT%TYPE;
X RECORD;
 BEGIN
 FOR X IN (SELECT DATE_EXTRACT, ROC, CUST_CD, SECURITY_CD
 FROM DEBT_SEC_AMM_STG
 WHERE TRIM(ROC) IN ('*', '0'))
  LOOP
  CUST_ROC := X.ROC;
  CUST_ID := X.CUST_CD;
  SEC_CD := X.SECURITY_CD;
  BUS_DATE := X.DATE_EXTRACT;
  UPDATE DEBT_SEC_AMM_STG SET ROC = CUST_ID
 WHERE TRIM(ROC) IN ('*', '0')
 AND DATE_EXTRACT = BUS_DATE
 AND SECURITY_CD = SEC_CD;
 END LOOP;
 END;

/* END */


 /*13.TRUNCATE TABLE DEBT_SEC_AMM*/
 PRO_NAME := 'TRUNCATE TABLE DEBT_SEC_AMM';

 TRUNCATE TABLE DEBT_SEC_AMM;


 /*14.INSERT NET BOOK VALUE INTO DEBT_SEC_AMM*/
 PRO_NAME := 'INSERT NET BOOK VALUE INTO DEBT_SEC_AMM';

/* TO INSERT NET BOOK VALUE INTO DEBT_SEC_AMM */
DECLARE
  BUS_DATE DEBT_SEC_AMM_STG.DATE_EXTRACT%TYPE;
   CUST_ROC DEBT_SEC_AMM_STG.ROC%TYPE;
  ENT_NM DEBT_SEC_AMM_STG.EN_NAME%TYPE;
  ACT_GRP DEBT_SEC_AMM_STG.ACT_GROUP%TYPE;
  LINE_OF_BUS DEBT_SEC_AMM_STG.LOB%TYPE;
  SUB_LINE_OF_BUS DEBT_SEC_AMM_STG.SUB_LOB%TYPE;
  MC DEBT_SEC_AMM_STG.MGMT_CENTRE%TYPE;
  PR_CD DEBT_SEC_AMM_STG.PR_CODE%TYPE;
  PR_NM DEBT_SEC_AMM_STG.PR_NAME%TYPE;
  RISK_SEC DEBT_SEC_AMM_STG.RISK_SECTOR%TYPE;
  ISSUE_S DEBT_SEC_AMM_STG.ISSUE_SIZE%TYPE;
  BOOK_CD DEBT_SEC_AMM_STG.BOOK_CODE%TYPE;
  FACE_V DEBT_SEC_AMM_STG.FACE_VALUE%TYPE;
  MARKET_V DEBT_SEC_AMM_STG.MARKET_VALUE%TYPE;
  INT_ACCRUED DEBT_SEC_AMM_STG.ACCRUED_INT%TYPE;
  CURR DEBT_SEC_AMM_STG.CURRENCY%TYPE;
  MAT_DATE DEBT_SEC_AMM_STG.MATURITY_DATE%TYPE;
  ISSUE_D DEBT_SEC_AMM_STG.ISSUE_DATE%TYPE;
  COUPON_D DEBT_SEC_AMM_STG.COUPON_DATE%TYPE;
  COUPON_R DEBT_SEC_AMM_STG.COUPON_RATE%TYPE;
  RATING DEBT_SEC_AMM_STG.RAM_MARC%TYPE;
  RATING_GRP DEBT_SEC_AMM_STG.BOND_INT_GRADE%TYPE;
  GUARANT DEBT_SEC_AMM_STG.GUARANTEE%TYPE;
  APPL_ID DEBT_SEC_AMM_STG.SOURCE_ID%TYPE;
  VALUE_D DEBT_SEC_AMM_STG.VALUE_DATE%TYPE;
  ACC_INT_TODAY DEBT_SEC_AMM_STG.CPN_ACCR_POSTED%TYPE;
  mTOT_PREMIUM NUMERIC(18,2):=0;
  mAMORTISED NUMERIC(18,2);
  mAMOUNT1 DEBT_SEC_AMM_STG.V_DATE_COST_OF_POS%TYPE;
  mAMOUNT2 DEBT_SEC_AMM_STG.VALUE_DATED_POS%TYPE;
  mUNAMORTISED DEBT_SEC_AMM_STG.DISC_ACCR_POSTED%TYPE;
  PRICE_TYPE DEBT_SEC_AMM_STG.SM_PRICE_TYPE%TYPE;
  PRICE_BASIS DEBT_SEC_AMM_STG.PRICE_TYP_PRICE_BASIS%TYPE;
  SECURITY_CODE DEBT_SEC_AMM_STG.SECURITY_CD%TYPE;
  NET_BOOK_VALUE DEBT_SEC_AMM_STG.NET_BOOK_VAL%TYPE;
  NET_BOOK_VALUE_1 DEBT_SEC_AMM_STG.NET_BOOK_VAL%TYPE;
  DEALER_DESK DEBT_SEC_AMM_STG.BOOK_CODE%TYPE;
  PROD_GRP4 DEBT_SEC_AMM_STG.PRODUCT_GRP4%TYPE;
X RECORD;
 BEGIN
 FOR X IN
 (SELECT  DATE_EXTRACT,
 ROC,
 EN_NAME,
 ACT_GROUP,
 LOB,
 SUB_LOB,
 MGMT_CENTRE,
 PR_CODE,
 PR_NAME,
 RISK_SECTOR,
 ISSUE_SIZE,
 BOOK_CODE,
 FACE_VALUE,
 NET_BOOK_VAL,
 MARKET_VALUE,
 ACCRUED_INT,
 CURRENCY,
 MATURITY_DATE,
 ISSUE_DATE,
 COUPON_DATE,
 COUPON_RATE,
 RAM_MARC,
 BOND_INT_GRADE,
 GUARANTEE,
 SOURCE_ID,
 VALUE_DATED_POS,
 CURR_POST,
 PRODUCT_GRP4,
 CPN_ACCR_POSTED,
 V_DATE_COST_OF_POS,
 DISC_ACCR_POSTED,
 SM_PRICE_TYPE,
 PRICE_TYP_PRICE_BASIS,
 VALUE_DATE,
 SECURITY_CD
 FROM DEBT_SEC_AMM_STG)
  LOOP
 BUS_DATE := X.DATE_EXTRACT;
 CUST_ROC := X.ROC;
 ENT_NM := X.EN_NAME;
 ACT_GRP := X.ACT_GROUP;
 LINE_OF_BUS := X.LOB;
 SUB_LINE_OF_BUS := X.SUB_LOB;
 MC := X.MGMT_CENTRE;
  PR_CD := X.PR_CODE;
  PR_NM := X.PR_NAME;
  RISK_SEC := X.RISK_SECTOR;
  ISSUE_S := X.ISSUE_SIZE;
  FACE_V := X.FACE_VALUE;
  MARKET_V := X.MARKET_VALUE;
  INT_ACCRUED := X.ACCRUED_INT;
  CURR := X.CURRENCY;
  MAT_DATE := X.MATURITY_DATE;
  ISSUE_D := X.ISSUE_DATE;
  COUPON_D := X.COUPON_DATE;
  COUPON_R := X.COUPON_RATE;
  RATING := X.RAM_MARC;
  RATING_GRP := X.BOND_INT_GRADE;
  GUARANT := X.GUARANTEE;
  APPL_ID := X.SOURCE_ID;
 VALUE_D := X.VALUE_DATE;
 DEALER_DESK := X.BOOK_CODE;
 SECURITY_CODE := X.SECURITY_CD;
 ACC_INT_TODAY := X.CPN_ACCR_POSTED;
 mAMOUNT1 := X.V_DATE_COST_OF_POS;
 mAMOUNT2 := X.VALUE_DATED_POS;
 mUNAMORTISED := X.DISC_ACCR_POSTED;
 PRICE_TYPE := X.SM_PRICE_TYPE;
 PRICE_BASIS := X.PRICE_TYP_PRICE_BASIS;
 PROD_GRP4 := X.PRODUCT_GRP4;
 mTOT_PREMIUM := mAMOUNT1 - mAMOUNT2;
 mAMORTISED := mTOT_PREMIUM - mUNAMORTISED;
 
 IF TRIM(PRICE_TYPE) <> 'NPRIC' THEN
 NET_BOOK_VALUE_1 := mAMOUNT2 + mUNAMORTISED;
 ELSE
 NET_BOOK_VALUE_1 := mAMOUNT2 + mAMORTISED;
 END IF;
 IF TRIM(PRICE_BASIS) = 'INC.ACCR' THEN
 NET_BOOK_VALUE := NET_BOOK_VALUE_1 + ACC_INT_TODAY;
 ELSE
 NET_BOOK_VALUE := NET_BOOK_VALUE_1;
 END IF;
 
 INSERT INTO DEBT_SEC_AMM
 (
 DATE_EXTRACT, ROC, EN_NAME, ACT_GROUP, LOB, SUB_LOB, MGMT_CENTRE,
 PR_CODE, PR_NAME, RISK_SECTOR, ISSUE_SIZE, BOOK_CODE, FACE_VALUE,
 NET_BOOK_VAL, MARKET_VALUE, ACCRUED_INT, CURRENCY,
 MATURITY_DATE, ISSUE_DATE, COUPON_DATE, COUPON_RATE, RAM_MARC,
 BOND_INT_GRADE, GUARANTEE, VALUE_DATE, SOURCE_ID, SECURITY_CD, PRODUCT_GRP4, CPN_ACCR_POSTED,
 V_DATE_COST_OF_POS, VALUE_DATED_POS, DISC_ACCR_POSTED, SM_PRICE_TYPE, PRICE_TYP_PRICE_BASIS
 )
 VALUES
 (
 BUS_DATE, CUST_ROC, ENT_NM, ACT_GRP, LINE_OF_BUS, SUB_LINE_OF_BUS, MC,
 PR_CD, PR_NM, RISK_SEC, ISSUE_S, DEALER_DESK, FACE_V,
 NET_BOOK_VALUE, MARKET_V, INT_ACCRUED, CURR,
 MAT_DATE, ISSUE_D, COUPON_D, COUPON_R, RATING,
 RATING_GRP, GUARANT, VALUE_D, APPL_ID, SECURITY_CODE, PROD_GRP4, ACC_INT_TODAY,
 mAMOUNT1, mAMOUNT2, mUNAMORTISED, PRICE_TYPE, PRICE_BASIS
 );
 END LOOP;
 END;

/* END */




 /*14.CONVERT FACE VALUE IN USD TO MYR EQUIVALENT*/
 PRO_NAME := 'CONVERT FACE VALUE IN USD TO MYR EQUIVALENT';

DECLARE
 BUS_DT DEBT_SEC_AMM.DATE_EXTRACT%TYPE;
 CUST_ID DEBT_SEC_AMM.ROC%TYPE;
 BOOK_CD DEBT_SEC_AMM.BOOK_CODE%TYPE;
 SEC_CD DEBT_SEC_AMM.SECURITY_CD%TYPE;
 CURR_ORIG DEBT_SEC_AMM.CURRENCY%TYPE;
 CURR_FX GLO_CURRENCY_NEW_STG.CURRENCY_CD%TYPE;
 ORIG_FV DEBT_SEC_AMM.FACE_VALUE%TYPE;
 FACE_VAL DEBT_SEC_AMM.FACE_VALUE%TYPE;
 MYR_FV DEBT_SEC_AMM.FACE_VALUE%TYPE;
 EX_RATE GLO_CURRENCY_NEW_STG.MID_REVAL_RATE%TYPE;
 QUOTATION GLO_CURRENCY_NEW_STG.QUOTATIONS_CD%TYPE;
 ORIG_NBV DEBT_SEC_AMM.NET_BOOK_VAL%TYPE;
 MYR_NBV DEBT_SEC_AMM.NET_BOOK_VAL%TYPE;
X RECORD;
 BEGIN
 FOR X IN
 (SELECT A.DATE_EXTRACT, A.ROC, A.BOOK_CODE,
 A.FACE_VALUE, A.CURRENCY, A.SECURITY_CD, A.NET_BOOK_VAL,
 B.CURRENCY_CD, B.QUOTATIONS_CD, B.MID_REVAL_RATE
 FROM DEBT_SEC_AMM A , GLO_CURRENCY_NEW_STG B
 WHERE A.DATE_EXTRACT = TO_DATE(B.BUS_DATE, 'YYYYMMDD')
 AND A.CURRENCY = B.CURRENCY_CD
 AND TRIM(A.CURRENCY) <> 'MYR'
 AND A.FACE_VALUE <> 0 )
 LOOP
 BUS_DT  := X.DATE_EXTRACT;
 CUST_ID := X.ROC;
 BOOK_CD := X.BOOK_CODE;
 ORIG_NBV := X.NET_BOOK_VAL;
 SEC_CD := X.SECURITY_CD;
 CURR_ORIG := X.CURRENCY;
 CURR_FX := X.CURRENCY_CD;
 ORIG_FV := X.FACE_VALUE;
 EX_RATE := X.MID_REVAL_RATE;
 QUOTATION := X.QUOTATIONS_CD;
 IF (CURR_ORIG = CURR_FX) AND (QUOTATION = 0) THEN
 MYR_FV := (ORIG_FV * EX_RATE /1);
 MYR_NBV := (ORIG_NBV * EX_RATE /1);
 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 1) THEN
 MYR_FV := (ORIG_FV * EX_RATE /10);
 MYR_NBV := (ORIG_NBV * EX_RATE /10);
 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 2) THEN
 MYR_FV := (ORIG_FV * EX_RATE /100);
 MYR_NBV := (ORIG_NBV * EX_RATE /100);
 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 3) THEN
 MYR_FV := (ORIG_FV * EX_RATE /1000);
 MYR_NBV := (ORIG_NBV * EX_RATE /1000);
 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 4) THEN
 MYR_FV := (ORIG_FV * EX_RATE /10000);
 MYR_NBV := (ORIG_NBV * EX_RATE /10000);
 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 5) THEN
 MYR_FV := (ORIG_FV * EX_RATE /100000);
 MYR_NBV := (ORIG_NBV * EX_RATE /100000);
 ELSIF (CURR_ORIG = CURR_FX) AND (QUOTATION = 6) THEN
 MYR_FV := (ORIG_FV * EX_RATE /1000000);
 MYR_NBV := (ORIG_NBV * EX_RATE /1000000);
 ELSE MYR_FV := ORIG_FV;
 MYR_NBV := ORIG_NBV;
 END IF;
 RAISE NOTICE 'CUST_ID : CUST_ID';


 UPDATE DEBT_SEC_AMM SET FACE_VALUE = MYR_FV
 WHERE TRIM(ROC) = TRIM(CUST_ID)
 AND DATE_EXTRACT = BUS_DT
 AND TRIM(BOOK_CODE) = TRIM(BOOK_CD)
 AND TRIM(SECURITY_CD) = TRIM(SEC_CD)
 AND NET_BOOK_VAL = MYR_NBV
 AND CURRENCY = CURR_ORIG;
  END LOOP;
 END;


 /*14. INSERT FROM DEBT_SEC_AMM INTO DEBT_SEC */
 PRO_NAME := 'INSERT FROM DEBT_SEC_AMM INTO DEBT_SEC';

INSERT INTO DEBT_SEC
(DES_BUS_DATE,
 DES_ROC,
 DES_EN_NAME,
 DES_ACT_GROUP,
 DES_LOB,
 DES_SUB_LOB,
 DES_MGMT_CENTRE,
 DES_PR_CODE,
 DES_PR_NAME,
 DES_RISK_SECTOR,
 DES_ISSUE_SIZE,
 DES_BOOK_CODE,
 DES_FACE_VALUE,
 DES_PR_GROUP4,
 DES_NET_BOOK_VAL,
 DES_INT_ACCRUED,
 DES_CURRENCY,
 DES_MATURITY_DATE,
 DES_ISSUE_DATE,
 DES_COUPON_DATE,
 DES_COUPON_RATE,
 DES_RAM_MARC,
 DES_BOND_INT_GRADE,
 DES_GUARANTEE,
 DES_SECURITY_CD,
 DES_VALUE_DATE,
 DES_APPL_ID)
(SELECT DISTINCT DATE_EXTRACT,
 LTRIM(ROC, '0'),
 EN_NAME,
 ACT_GROUP,
 LOB,
 SUB_LOB,
 MGMT_CENTRE,
 PR_CODE,
 PR_NAME,
 RISK_SECTOR,
 ISSUE_SIZE,
 TRIM(BOOK_CODE) AS BOOK_CODE,
 FACE_VALUE,
 PRODUCT_GRP4,
 NET_BOOK_VAL,
 ACCRUED_INT,
 CURRENCY,
 MATURITY_DATE,
 ISSUE_DATE,
 COUPON_DATE,
 COUPON_RATE,
 RAM_MARC,
 BOND_INT_GRADE,
 GUARANTEE,
 TRIM(SECURITY_CD),
 VALUE_DATE,
 SOURCE_ID
 FROM DEBT_SEC_AMM
 WHERE TRIM(ROC) IS NOT NULL
 AND TRIM(BOOK_CODE) <> '100000-530');


 /*LOAD START STATUS*/
 PRO_NAME := 'LOAD GLOBUS DATA INTO DEBT SEC';
 PRO_STATUS := 'END';
 PRO_BUS_DATE := RERUN_DATE;
 PRO_LOAD_STATUS := 'TRUE';
 PRO_SYSTEM_DATE := SYS_DATE;

 INSERT INTO ADM_PROCESS_LOG
 (APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
 VALUES (PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);

/********************************************************************************************************************/
-- END INSERT INTO DEBT SEC
/********************************************************************************************************************/

EXCEPTION
 WHEN OTHERS THEN
 /*INSERT INTO ADM_EXT_TO_STG_LOG*/
 --PRO_NAME := 'LOAD EXTERNAL TABLE INTO STAGING TABLE';
 PRO_STATUS := '-1,error';
 PRO_BUS_DATE := RERUN_DATE;
 PRO_SYSTEM_DATE := Get_Current_Date(SYS_DATE);
 PRO_LOAD_STATUS := 'FALSE';

 INSERT INTO ADM_PROCESS_LOG
 (APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
 VALUES (PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);

 /*INSERT INTO ADM_ERROR_LOG*/
 INSERT INTO ADM_ERROR_LOG
 (AEL_PRO_NAME, AEL_PRO_STATUS, AEL_PRO_BUS_DATE, AEL_LOAD_STATUS, AEL_SYSTEM_DATE)
 VALUES (PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);

END ;
$$
LANGUAGE PLPGSQL;
------
--Dev: Jitendra Lodwal
--Date: 26/09/2011
--Desc: Function
------

SET SEARCH_PATH TO RISK;

CREATE OR REPLACE FUNCTION Rmd_Step_4() RETURNS VOID AS $$
DECLARE

/********************************AMENDMENT LOG******************************************/

--/*   NAME      DATE            DETAILS 
      -----     -----           --------
--/*                            - Temporary set the rerun date same as the source date 
--/* AMYLIA     18/04/2008      -- AMYLIA AMENDED SINCE ASI BUS DATE return 2 ROWS 
	 							-- GMFX SOURCE FILE EMPTY    		  		  					 		  
--/* AMYLIA 	26/05/2008      -- TO USED BACK ORI SCRIPT TO GET NPL VAL = RERUN DATE         
	 							


/*********************************THE END**********************************************/




	   SYS_DATE DATE;
	   NPD_VAL DATE;
	   EOM_DATE DATE;
	   NEXT_PROCESS_DAY VARCHAR(30);
	   PRO_NAME        ADM_PROCESS_LOG.APL_PRO_NAME%TYPE;
	   PRO_STATUS      ADM_PROCESS_LOG.APL_PRO_STATUS%TYPE;
	   PRO_BUS_DATE    ADM_PROCESS_LOG.APL_PRO_BUS_DATE%TYPE;
	   PRO_LOAD_STATUS ADM_PROCESS_LOG.APL_LOAD_STATUS%TYPE;
	   PRO_SYSTEM_DATE ADM_PROCESS_LOG.APL_SYSTEM_DATE%TYPE;
	   COUNT_DATE INT;
	   RERUN_DATE DATE;
	   ENDOFMONTH DATE;
BEGIN
RAISE NOTICE 'step4begin';
	 /*GET SYSTEM DATE*/
	 SELECT CURRENT_DATE INTO SYS_DATE;
	 /*TRUNCATE ADM_ERROR_LOG*/
	 TRUNCATE TABLE ADM_ERROR_LOG;
	 
	 /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
	 /*CHECK NEXT_PROCESSING_DATE = 'END OF MONTH'*/
	 /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
	 /*1.GET NEXT PROCESSING DATE*/
	 SELECT CAST(LAST_PROCESSING_DATE AS DATE) + 1 AS NPD INTO NPD_VAL
	 FROM ADM_ADMIN WHERE NEXT_PROCESSING_DATE IS NULL;
	 
	 -- Temporary set the rerun date same as the source date (COMMENT BACK ON 26/05/2008) 

RAISE NOTICE 'step4_1'; 
	 /*PASS VALUE TO RERUN_DATE*/
	 RERUN_DATE := NPD_VAL;
		 /*GET DAY FOR NEXT PROCESSING DATE*/
		 SELECT TO_CHAR(CAST(LAST_PROCESSING_DATE AS DATE) + 1,'DAY') INTO NEXT_PROCESS_DAY
		 FROM ADM_ADMIN WHERE NEXT_PROCESSING_DATE IS NULL;
		 /*START CHECK DAY(NEXT_PROCESS_DAY)*/
		 IF(TRIM(NEXT_PROCESS_DAY) = 'SATURDAY') THEN
		     /*NO PROCESS RUN ON SATURDAY*/
			RAISE NOTICE 'NO PROCESS RUN ON SATURDAY';
			 PRO_NAME:= 'CHECK DAY(NEXT_PROCESS_DAY)';
			 PRO_BUS_DATE:= RERUN_DATE;
			 PRO_STATUS := 'FAIL. NO PROCESS RUN ON SATURDAY';
			 PRO_LOAD_STATUS := '';
			 PRO_SYSTEM_DATE := Get_Current_Date(SYS_DATE);
	 		 INSERT INTO ADM_PROCESS_LOG
			 (APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
	 		 VALUES	(PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);
			 /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
			 /*UPDATE LAST_PROCESSING_DATE AND NEXT_PROCESSING_DATE FROM ADM_ADMIN*/
			 /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
		     /*UPDATE NEXT_PROCESSING_DATE = LAST_PROCESSING_DATE + 1*/
			 UPDATE ADM_ADMIN SET NEXT_PROCESSING_DATE = CAST(LAST_PROCESSING_DATE AS DATE) + 1
			 WHERE NEXT_PROCESSING_DATE IS NULL;
		     /*INSERT LAST_PROCESSING_DATE (TO GET NEW PROCESING DATE)*/
			 INSERT INTO ADM_ADMIN (LAST_PROCESSING_DATE) SELECT MAX(CAST(LAST_PROCESSING_DATE AS DATE))+1 FROM ADM_ADMIN;
			  ELSE
			 IF(TRIM(NEXT_PROCESS_DAY) = 'SUNDAY') THEN
			     /*NO PROCESS RUN ON SUNDAY*/
				 RAISE NOTICE 'NO PROCESS RUN ON SUNDAY';
	    		 PRO_NAME:= 'CHECK DAY(NEXT_PROCESS_DAY)';
	    		 PRO_BUS_DATE:= RERUN_DATE;
	    		 PRO_STATUS := 'FAIL: NO PROCESS RUN ON SUNDAY';
			     PRO_LOAD_STATUS := '';
			     PRO_SYSTEM_DATE := Get_Current_Date(SYS_DATE);
	     		 INSERT INTO ADM_PROCESS_LOG
				 (APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
	     		 VALUES	(PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);
			     /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
			     /*UPDATE LAST_PROCESSING_DATE AND NEXT_PROCESSING_DATE FROM ADM_ADMIN*/
			     /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
	     	     /*UPDATE NEXT_PROCESSING_DATE = LAST_PROCESSING_DATE + 1*/
	     		 UPDATE ADM_ADMIN SET NEXT_PROCESSING_DATE = CAST(LAST_PROCESSING_DATE AS DATE) + 1
	     		 WHERE NEXT_PROCESSING_DATE IS NULL;
	     	     /*INSERT LAST_PROCESSING_DATE (TO GET NEW PROCESING DATE)*/
	     		 INSERT INTO ADM_ADMIN (LAST_PROCESSING_DATE) SELECT MAX(LAST_PROCESSING_DATE)+1 FROM ADM_ADMIN;
				 --INSERT INTO ADM_ADMIN (LAST_PROCESSING_DATE) VALUES (RERUN_DATE);
			 ELSE
			     /*PROCESS RUN MONDAY UNTIL FRIDAY*/
				 /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
				 /*CHECK NEXT_PROCESSING_DATE = 'PUBLIC HOLIDAY (HOLIDAY_DATE)'*/
				 /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
				 SELECT COUNT(HOLIDAY_DATE) AS CNT_DATE INTO COUNT_DATE FROM PUBLIC_HOLIDAY_STG
				 WHERE HOLIDAY_DATE = NPD_VAL;
				 IF(COUNT_DATE = 0) THEN
						/*CHECK FOR END OF MONTH: IF YES, NO PROCESS ON END OF MONTH, SAME LIKE PUBLIC HOLIDAY*/
				     	 SELECT LAST_DAY(CAST(LAST_PROCESSING_DATE AS DATE) + 1) AS X INTO ENDOFMONTH
 	                     FROM ADM_ADMIN WHERE NEXT_PROCESSING_DATE IS NULL;
						 IF(ENDOFMONTH = NPD_VAL) THEN
							     /*NEXT_PROCESSING_DATE IS ON END OF MONTH. STOP PROCESS*/
								 PRO_NAME:= 'CHECK FOR END OF MONTH(NEXT_PROCESSING_DAY)';
								 PRO_BUS_DATE:= RERUN_DATE;
								 PRO_STATUS := 'FAIL. NO DAILY PROCESS RUN ON END OF MONTH';
						         PRO_LOAD_STATUS := '';
						         PRO_SYSTEM_DATE := Get_Current_Date(SYS_DATE);
				     		     INSERT INTO ADM_PROCESS_LOG
							     (APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
				     		     VALUES	(PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);
								 /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
								 /*UPDATE LAST_PROCESSING_DATE AND NEXT_PROCESSING_DATE FROM ADM_ADMIN*/
								 /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
							     /*UPDATE NEXT_PROCESSING_DATE = LAST_PROCESSING_DATE + 1*/
								 UPDATE ADM_ADMIN SET NEXT_PROCESSING_DATE = CAST(LAST_PROCESSING_DATE AS DATE) + 1
								 WHERE NEXT_PROCESSING_DATE IS NULL;
							     /*INSERT LAST_PROCESSING_DATE (TO GET NEW PROCESING DATE)*/
								 INSERT INTO ADM_ADMIN (LAST_PROCESSING_DATE) SELECT MAX(CAST(LAST_PROCESSING_DATE AS DATE))+1 FROM ADM_ADMIN;
								
						 ELSE
						          /*NEXT_PROCESSING_DATE IS NOT ON PUBLIC HOLIDAY/END OF MONTH. CONTINUE PROCESS*/
						          SELECT Rmd_Step_2(RERUN_DATE);
					     END IF;
				 ELSE
				     /*NEXT_PROCESSING_DATE IS ON PUBLIC HOLIDAY. STOP PROCESS*/
					 PRO_NAME:= 'CHECK FOR PUBLIC HOLIDAY(NEXT_PROCESSING_DAY)';
					 PRO_BUS_DATE:= RERUN_DATE;
					 PRO_STATUS := 'FAIL. NO PROCESS RUN ON PUBLIC HOLIDAY';
			         PRO_LOAD_STATUS := '';
			         PRO_SYSTEM_DATE := Get_Current_Date(SYS_DATE);
	     		     INSERT INTO ADM_PROCESS_LOG
				     (APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
	     		     VALUES	(PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);
					 /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
					 /*UPDATE LAST_PROCESSING_DATE AND NEXT_PROCESSING_DATE FROM ADM_ADMIN*/
					 /*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/
				     /*UPDATE NEXT_PROCESSING_DATE = LAST_PROCESSING_DATE + 1*/
					 UPDATE ADM_ADMIN SET NEXT_PROCESSING_DATE = CAST(LAST_PROCESSING_DATE AS DATE) + 1
					 WHERE NEXT_PROCESSING_DATE IS NULL;
				     /*INSERT LAST_PROCESSING_DATE (TO GET NEW PROCESING DATE)*/
					 INSERT INTO ADM_ADMIN (LAST_PROCESSING_DATE) SELECT MAX(CAST(LAST_PROCESSING_DATE AS DATE)) + 1 FROM ADM_ADMIN;
					

				 END IF; /*END PUBLIC HOLIDAY CHECKING*/
			 END IF;
			 /*(END) PROCESS RUN MONDAY UNTIL FRIDAY*/
		 END IF;
		 /*END CHECK DAY(NEXT_PROCESS_DAY)*/
		 
RAISE NOTICE 'step4_end'; 
EXCEPTION
     WHEN OTHERS THEN
		 /*INSERT INTO ADM_PROCESS_LOG*/
		 PRO_NAME := 'LOAD EXTERNAL TABLE INTO STAGING TABLE';
		 PRO_STATUS := '-1,error';
		 PRO_BUS_DATE := RERUN_DATE;
		 PRO_LOAD_STATUS := 'FALSE';
		 PRO_SYSTEM_DATE := Get_Current_Date(SYS_DATE);
		 INSERT INTO ADM_PROCESS_LOG
		 (APL_PRO_NAME, APL_PRO_STATUS, APL_PRO_BUS_DATE, APL_LOAD_STATUS, APL_SYSTEM_DATE)
	     VALUES	(PRO_NAME, PRO_STATUS, PRO_BUS_DATE, PRO_LOAD_STATUS, PRO_SYSTEM_DATE);
END;
$$
LANGUAGE PLPGSQL;